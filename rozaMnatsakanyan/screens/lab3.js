import React, { useState, useMemo, useCallback } from 'react';
import { View, Text, TextInput, StyleSheet, Button, ScrollView, Animated, Easing } from 'react-native';

const UseMemoDemo = () => {
  const [inputNumber, setInputNumber] = useState('0');
  const [result, setResult] = useState({ withMemo: 0, withoutMemo: 0 });
  const [memoSpinning, setMemoSpinning] = useState(false);
  const [normalSpinning, setNormalSpinning] = useState(false);
  const [executionTime, setExecutionTime] = useState({ withMemo: 0, withoutMemo: 0 });
  const spinValue = new Animated.Value(0);
  const [lastCalculatedNumber, setLastCalculatedNumber] = useState(null);
  const [memoizedResult, setMemoizedResult] = useState(null);

  // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
  const startSpinAnimation = (isMemorized) => {
    const targetState = isMemorized ? setMemoSpinning : setNormalSpinning;
    targetState(true);
    Animated.loop(
      Animated.timing(spinValue, {
        toValue: 1,
        duration: 1000,
        easing: Easing.linear,
        useNativeDriver: true,
      })
    ).start();
  };

  const stopSpinAnimation = (isMemorized) => {
    const targetState = isMemorized ? setMemoSpinning : setNormalSpinning;
    targetState(false);
    spinValue.setValue(0);
  };

  // –°–¥–µ–ª–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—è–∂–µ–ª—ã–º–∏
  const expensiveCalculation = async (num) => {
    const startTime = performance.now();
    let result = 0;
    const n = parseInt(num);
    
    // –û—á–µ–Ω—å —Ç—è–∂–µ–ª—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    for (let i = 0; i < 10000000; i++) {
      result += Math.pow(n, 2) / (i + 1);
      result = Math.sqrt(result);
      // –î–æ–±–∞–≤–∏–º —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
      result += Math.sin(result) + Math.cos(result);
      result = Math.sqrt(Math.abs(result));
      
      // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
      if (result > Number.MAX_SAFE_INTEGER) {
        result = Math.sqrt(result);
      }
    }
    
    const endTime = performance.now();
    return { result, executionTime: endTime - startTime };
  };

  const handleCalculatePress = async () => {
    // –í—ã—á–∏—Å–ª–µ–Ω–∏—è –±–µ–∑ useMemo
    setNormalSpinning(true);
    const { result: normalResult, executionTime: normalTime } = await expensiveCalculation(inputNumber);
    setResult(prev => ({ ...prev, withoutMemo: normalResult }));
    setExecutionTime(prev => ({ ...prev, withoutMemo: normalTime }));
    setNormalSpinning(false);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    setMemoSpinning(true);
    let memoResult, memoTime;
    
    if (lastCalculatedNumber === inputNumber && memoizedResult !== null) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const startTime = performance.now();
      memoResult = memoizedResult;
      const endTime = performance.now();
      memoTime = endTime - startTime;
    } else {
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const { result, executionTime } = await expensiveCalculation(inputNumber);
      memoResult = result;
      memoTime = executionTime;
      setMemoizedResult(memoResult);
      setLastCalculatedNumber(inputNumber);
    }
    
    setResult(prev => ({ ...prev, withMemo: memoResult }));
    setExecutionTime(prev => ({ ...prev, withMemo: memoTime }));
    setMemoSpinning(false);
  };

  const spin = spinValue.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '360deg']
  });

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç useMemo?</Text>
      
      <View style={styles.demoContainer}>
        <Text style={styles.subtitle}>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:</Text>
        <TextInput
          style={styles.input}
          value={inputNumber}
          onChangeText={setInputNumber}
          keyboardType="numeric"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 42"
        />

        <View style={styles.calculationsContainer}>
          <View style={styles.calculationBox}>
            <Text style={styles.boxTitle}>–° useMemo</Text>
            <View style={styles.visualDemo}>
              {memoSpinning ? (
                <>
                  <Animated.Text style={[styles.gearIcon, { transform: [{ rotate: spin }] }]}>
                    ‚öôÔ∏è
                  </Animated.Text>
                  <Text style={styles.calculatingText}>
                    {lastCalculatedNumber === inputNumber 
                      ? "–ë–µ—Ä—É –∏–∑ –ø–∞–º—è—Ç–∏..." 
                      : "–í—ã—á–∏—Å–ª—è—é..."}
                  </Text>
                </>
              ) : (
                <>
                  <Text style={styles.resultText}>
                    {result.withMemo ? '‚úÖ –ì–æ—Ç–æ–≤–æ!' : 'üíæ –û–∂–∏–¥–∞–Ω–∏–µ'}
                  </Text>
                  {result.withMemo && (
                    <>
                      <Text style={styles.timeText}>
                        {lastCalculatedNumber === inputNumber 
                          ? "–í–∑—è—Ç–æ –∏–∑ –ø–∞–º—è—Ç–∏!" 
                          : "–ü–æ—Å—á–∏—Ç–∞–Ω–æ –∑–∞–Ω–æ–≤–æ"}
                      </Text>
                      <Text style={styles.executionTime}>
                        –í—Ä–µ–º—è: {executionTime.withMemo.toFixed(2)} –º—Å
                      </Text>
                    </>
                  )}
                </>
              )}
            </View>
          </View>

          <View style={styles.calculationBox}>
            <Text style={styles.boxTitle}>–ë–µ–∑ useMemo</Text>
            <View style={styles.visualDemo}>
              {normalSpinning ? (
                <>
                  <Animated.Text style={[styles.gearIcon, { transform: [{ rotate: spin }] }]}>
                    ‚öôÔ∏è
                  </Animated.Text>
                  <Text style={styles.calculatingText}>–°—á–∏—Ç–∞—é –∑–∞–Ω–æ–≤–æ...</Text>
                </>
              ) : (
                <>
                  <Text style={styles.resultText}>
                    {result.withoutMemo ? '‚úÖ –ì–æ—Ç–æ–≤–æ!' : 'üîÑ –û–∂–∏–¥–∞–Ω–∏–µ'}
                  </Text>
                  {result.withoutMemo && (
                    <>
                      <Text style={styles.timeText}>–ü—Ä–∏—à–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ!</Text>
                      <Text style={styles.executionTime}>
                        –í—Ä–µ–º—è: {executionTime.withoutMemo.toFixed(2)} –º—Å
                      </Text>
                    </>
                  )}
                </>
              )}
            </View>
          </View>
        </View>

        <Button
          title="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
          onPress={handleCalculatePress}
          style={styles.button}
        />

        <View style={styles.explanationCard}>
          <Text style={styles.explanationTitle}>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</Text>
          <Text style={styles.explanationText}>
            üëÜ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
          </Text>
          <Text style={styles.step}>1. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</Text>
          <Text style={styles.step}>2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"</Text>
          <Text style={styles.step}>3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑ —Å —Ç–µ–º –∂–µ —á–∏—Å–ª–æ–º</Text>
          <Text style={styles.bulletPoint}>‚Ä¢ –° useMemo: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤–æ–∑—å–º—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –ø–∞–º—è—Ç–∏</Text>
          <Text style={styles.bulletPoint}>‚Ä¢ –ë–µ–∑ useMemo: –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ</Text>
        </View>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 16,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 20,
    color: '#2c3e50',
  },
  demoContainer: {
    padding: 16,
  },
  subtitle: {
    fontSize: 18,
    marginBottom: 10,
    color: '#34495e',
  },
  input: {
    borderWidth: 2,
    borderColor: '#3498db',
    borderRadius: 10,
    padding: 15,
    fontSize: 18,
    marginBottom: 20,
  },
  calculationsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  calculationBox: {
    flex: 1,
    margin: 5,
    padding: 15,
    borderRadius: 15,
    backgroundColor: '#f8f9fa',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  boxTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 10,
    color: '#2c3e50',
  },
  visualDemo: {
    alignItems: 'center',
    justifyContent: 'center',
    height: 120,
  },
  gearIcon: {
    fontSize: 40,
  },
  resultText: {
    fontSize: 16,
    textAlign: 'center',
    color: '#2c3e50',
  },
  button: {
    marginVertical: 20,
  },
  explanationCard: {
    backgroundColor: '#e8f4f8',
    padding: 20,
    borderRadius: 15,
    marginTop: 20,
  },
  explanationTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#2c3e50',
  },
  explanationText: {
    fontSize: 16,
    marginBottom: 10,
    color: '#34495e',
  },
  step: {
    fontSize: 16,
    marginLeft: 10,
    marginVertical: 5,
    color: '#34495e',
  },
  bulletPoint: {
    fontSize: 14,
    marginLeft: 20,
    marginVertical: 3,
    color: '#7f8c8d',
  },
  calculatingText: {
    marginTop: 10,
    fontSize: 14,
    color: '#e74c3c',
  },
  timeText: {
    marginTop: 5,
    fontSize: 12,
    color: '#7f8c8d',
  },
  executionTime: {
    marginTop: 5,
    fontSize: 12,
    color: '#e74c3c',
    fontWeight: 'bold',
  },
});

export default UseMemoDemo;